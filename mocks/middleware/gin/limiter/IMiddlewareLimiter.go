// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	limiter "bitbucket.org/moladinTech/go-lib-common/middleware/gin/limiter"
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// IMiddlewareLimiter is an autogenerated mock type for the IMiddlewareLimiter type
type IMiddlewareLimiter struct {
	mock.Mock
}

// WithCustomLimit provides a mock function with given fields: rt
func (_m *IMiddlewareLimiter) WithCustomLimit(rt limiter.RateLimit) gin.HandlerFunc {
	ret := _m.Called(rt)

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(limiter.RateLimit) gin.HandlerFunc); ok {
		r0 = rf(rt)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

type mockConstructorTestingTNewIMiddlewareLimiter interface {
	mock.TestingT
	Cleanup(func())
}

// NewIMiddlewareLimiter creates a new instance of IMiddlewareLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIMiddlewareLimiter(t mockConstructorTestingTNewIMiddlewareLimiter) *IMiddlewareLimiter {
	mock := &IMiddlewareLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
