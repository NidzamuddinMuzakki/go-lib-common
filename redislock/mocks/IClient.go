// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	context "context"

	bsmredislock "github.com/bsm/redislock"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetMetadata provides a mock function with given fields: ctx
func (_m *IClient) GetMetadata(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetTTL provides a mock function with given fields: ctx
func (_m *IClient) GetTTL(ctx context.Context) (time.Duration, error) {
	ret := _m.Called(ctx)

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(context.Context) time.Duration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: ctx
func (_m *IClient) GetToken(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Lock provides a mock function with given fields: ctx, key, ttl, opt
func (_m *IClient) Lock(ctx context.Context, key string, ttl time.Duration, opt *bsmredislock.Options) error {
	ret := _m.Called(ctx, key, ttl, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration, *bsmredislock.Options) error); ok {
		r0 = rf(ctx, key, ttl, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Refresh provides a mock function with given fields: ctx, ttl, opt
func (_m *IClient) Refresh(ctx context.Context, ttl time.Duration, opt *bsmredislock.Options) error {
	ret := _m.Called(ctx, ttl, opt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration, *bsmredislock.Options) error); ok {
		r0 = rf(ctx, ttl, opt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unlock provides a mock function with given fields: ctx
func (_m *IClient) Unlock(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIClient(t mockConstructorTestingTNewIClient) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
